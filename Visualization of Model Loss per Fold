import cv2
import os
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import confusion_matrix

# 이미지 경로
image_dir = 'C:/eyeeye'

# 이미지 데이터와 라벨을 저장할 리스트
data = []
labels = []

# 이미지 파일을 불러와서 데이터와 라벨을 생성
for filename in os.listdir(image_dir):
    if filename.startswith('closed_eye'):
        label = 1
    elif filename.startswith('open_eye'):
        label = 0
    else:
        continue

    img = cv2.imread(os.path.join(image_dir, filename))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    data.append(img)
    labels.append(label)

# 데이터를 NumPy 배열로 변환
data = np.array(data)
labels = np.array(labels)

# 5-fold cross-validation을 위한 분할
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# 시각화를 위한 리스트
acc_per_fold = []
loss_per_fold = []

# 모델 훈련 및 시각화
for fold_idx, (train_idx, test_idx) in enumerate(skf.split(data, labels)):
    print(f"Fold {fold_idx + 1}")

    train_data, test_data = data[train_idx], data[test_idx]
    train_labels, test_labels = labels[train_idx], labels[test_idx]

    datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=20,
        width_shift_range=0.1,
        height_shift_range=0.1,
        shear_range=0.2,
        zoom_range=0.2,
        brightness_range=[0.5, 1.5],
        horizontal_flip=True,
        fill_mode='nearest'
    )

    # 모델 정의
    model = Sequential([
        Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu', input_shape=(26, 34, 3)),
        MaxPooling2D(2, 2),
        Conv2D(64, kernel_size=3, strides=1, padding='same', activation='relu'),
        MaxPooling2D(2, 2),
        Conv2D(128, kernel_size=3, strides=1, padding='same', activation='relu'),
        MaxPooling2D(2, 2),
        Flatten(),
        Dense(512, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')
    ])

    model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])

    early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

    history = model.fit(
        datagen.flow(train_data, train_labels, batch_size=32),
        validation_data=(test_data, test_labels),
        epochs=30,
        callbacks=[early_stopping],
        verbose=1
    )

    # 시각화 데이터 저장
    acc_per_fold.append(history.history['accuracy'])
    loss_per_fold.append(history.history['loss'])

    # 폴드별 모델 저장
    model_path = f'C:/Users/kimji/openCV_project/eye_model_fold{fold_idx + 1}.h5'
    model.save(model_path)

    # 모델 로드 및 혼동 행렬 계산
    loaded_model = load_model(model_path)
    predicted_labels = loaded_model.predict(test_data)
    cm = confusion_matrix(test_labels, np.round(predicted_labels))

    # 혼동 행렬 시각화
    plt.figure(figsize=(3, 3))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix for Fold {fold_idx + 1}')
    plt.ylabel('Actual')
    plt.xlabel('Predicted')
    plt.show()

# Seaborn 스타일 설정
sns.set(style="whitegrid")

# 색상과 마커 스타일 설정
colors = ['red', 'blue', 'green', 'purple', 'orange']
markers = ['o', 's', 'x', '^', 'd']

# 폴드별 정확도 시각화
plt.figure(figsize=(6, 6))
for i in range(len(acc_per_fold)):
    sns.lineplot(x=range(len(acc_per_fold[i])), y=acc_per_fold[i], 
                 label=f'Fold {i+1} Training Accuracy', 
                 color=colors[i], marker=markers[i], markevery=1)
plt.title('Model Accuracy per Fold')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()

# 폴드별 손실 시각화
plt.figure(figsize=(6, 6))
for i in range(len(loss_per_fold)):
    sns.lineplot(x=range(len(loss_per_fold[i])), y=loss_per_fold[i], 
                 label=f'Fold {i+1} Training Loss', 
                 color=colors[i], marker=markers[i], markevery=1)
plt.title('Model Loss per Fold')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()
